
COLLECTION_DIR="${HOME}/.ansible/collections/ansible_collections/${COLLECTION_NAMESPACE}/${COLLECTION_NAME}"

TOX_ARGS=

if [ -n "${TOX_SCENARIO}" ]
then
  TOX_ARGS="--scenario-name ${TOX_SCENARIO}"
fi

TOX_OPTS="-e ${TOX_ANSIBLE}"

vercomp() {

  [[ $1 == $2 ]] && return 0
  v1=$(echo "$1" | sed -e 's|-|.|g')
  v2=$(echo "$2" | sed -e 's|-|.|g')

  local IFS=.
  local i ver1=($1) ver2=($2)
  # fill empty fields in ver1 with zeros
  for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
  do
    ver1[i]=0
  done

  for ((i=0; i<${#ver1[@]}; i++))
  do
    if [[ -z ${ver2[i]} ]]
    then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    fi
    if ((10#${ver1[i]} > 10#${ver2[i]}))
    then
      return 1
    fi
    if ((10#${ver1[i]} < 10#${ver2[i]}))
    then
      return 2
    fi
  done
  return 0
}

list_collections() {

  if [ -f collections.yml ]
  then
    echo "required collection(s)"

    collections=$(ansible-galaxy collection list --format json | grep -v -E "starting run|Validate TLS")

    is_installed="false"

    for collection in $(grep -v "#" collections.yml | grep "^  - name: " | awk -F ': ' '{print $2}')
    do
      required_version="$(grep -v "#" collections.yml | grep -A1 "^  - name: ${collection}" | grep "version: " 2> /dev/null | awk -F ': ' '{print $2}' | sed -e 's|=||' -e 's|>||' -e 's|"||g')"

      while read repository
      do
        version=
        installed_version=
        required_version=

        REPOSITORY=${repository}
        COLLECTION=${collection}

        repo=$(echo ${collections} | \
          jq -r \
            --arg REPOSITORY "$REPOSITORY" \
            'to_entries | map(select(.key == $REPOSITORY)) | from_entries')

        # echo "$repo"

        installed_version=$(echo ${repo} | \
          jq -r \
            --arg COLLECTION "$COLLECTION" \
            '.[] | with_entries(select(.key | contains($COLLECTION))) | select(.key != {}) | .[].version')

        if [[ ! -z "${installed_version}" ]]
        then
          echo "  - '${collection}' is installed in version ${installed_version} (in ${repository})."
        fi
      done < <(echo "${collections}" | jq -r 'keys[]')
    done
  fi
}

ansible_collection() {

  if [ -f collections.yml ]
  then
    list_collections

    # force install of all collections
    ansible-galaxy collection install --force --requirements-file collections.yml > /dev/null
  fi
}

install_collection() {
  local collection="${1}"

  echo "Install the required collection '${collection}'"
  ansible-galaxy collection install ${collection} > /dev/null
}

remove_collection() {

  local collection="${1}"

  namespace="$(echo "${collection}" | cut -d '.' -f1)"
  name="$(echo "${collection}" | cut -d '.' -f2)"

  collection="${HOME}/.ansible/collections/ansible_collections/${namespace}/${name}"

  rm \
    --recursive \
    --force \
    "${collection}" > /dev/null
}

publish() {

  TOKEN="${HOME}/.ansible/galaxy_token"

  if [ -e "${TOKEN}" ]
  then
    ansible-galaxy import --token=$(cat "${TOKEN}") bodsch # "???"
  fi
}
